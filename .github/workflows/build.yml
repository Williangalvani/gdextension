name: üõ†Ô∏è Builds
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  windowsbuild:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [windows]

    steps:
      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: 'x64'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive


      - name: Install Chocolatey packages
        run: |
          choco install --yes --allow-empty-checksums pkgconfiglite
          choco install --yes zip
          choco install --yes gstreamer gstreamer-devel

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # - name: Set PKG_CONFIG_PATH for GStreamer
      #   run: |
      #     echo "PKG_CONFIG_PATH=C:\gstreamer\1.0\msvc_x86_64\lib\pkgconfig" | Out-File -Append -FilePath $Env:GITHUB_ENV -Encoding utf8
            
      - name: Install SCons
        run: |
          python -m pip install scons

      - name: Build with SCons
        shell: powershell
        run: |
          echo "PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
          scons platform=${{ matrix.platform }}
        env:
          PKG_CONFIG_PATH: D:/gstreamer/1.0/msvc_x86_64/lib/pkgconfig

      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-windows
          path: ${{ github.workspace }}/addons/

  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
#           - identifier: linux-debug
#             name: Linux Debug
#             runner: ubuntu-20.04
#             target: template_debug
#             platform: linux
#             arch: x86_64
          - identifier: linux-release-x86
            name: Linux Release x86_64
            runner: ubuntu-20.04
            target: template_release
            platform: linux
            arch: x86_64
          - identifier: linux-debug-x86
            name: Linux Debug x86_64
            runner: ubuntu-20.04
            target: template_debug
            platform: linux
            arch: x86_64
          - identifier: linux-release-arm
            name: Linux Release arm32
            runner: ubuntu-20.04
            target: template_release
            platform: linux
            arch: arm32
          - identifier: linux-debug-arm
            name: Linux Debug arm32
            runner: ubuntu-20.04
            target: template_release
            platform: linux
            arch: arm32

#           - identifier: android-release
#             name: Android Release
#             runner: ubuntu-20.04
#             target: template_release
#             platform: android
#             arch: arm64
          - identifier: macos-release
            name: MacOS Release
            runner: macos-latest
            target: template_release
            platform: macos
            arch: arm64
          - identifier: macos-debug
            name: MacOS Debug
            runner: macos-latest
            target: template_debug
            platform: macos
            arch: arm64

    steps:
      - name: (MacOS) Install gstreamer
        if: ${{ startsWith(matrix.identifier, 'macos-') }}
        shell: sh
        run: |
          brew install --overwrite gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-rtsp-server

      - name: (Linux) Install gstreamer
        if: ${{ startsWith(matrix.identifier, 'linux-') }}
        shell: sh
        run: |
          sudo apt-get update
          sudo apt-get install -y msitools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio gstreamer1.0-rtsp libgstrtspserver-1.0-dev

      - name: (Android) Set up Java 11
        if: ${{ startsWith(matrix.identifier, 'android-') }}
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: (Android) Set up Android SDK
        if: ${{ startsWith(matrix.identifier, 'android-') }}
        uses: android-actions/setup-android@v2

      - name: (Android) Install Android Tools
        if: ${{ startsWith(matrix.identifier, 'android-') }}
        shell: sh
        run: |
          "$ANDROID_SDK_ROOT"/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "build-tools;30.0.3" "platforms;android-29" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;21.4.7075529"

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Set up SCons
        shell: bash
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version

      - name: Checkout project
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Compile extension
        shell: sh
        run: |
          export PKG_CONFIG_PATH=${{ startsWith(matrix.identifier, 'windows-') && format('{0}/gstreamer-sdk/gstreamer/1.0/mingw_x86_64/lib/pkgconfig/', github.workspace) || '' }}
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}' -j2

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.identifier }}
          path: |
            ${{ github.workspace }}/addons/

  zip-artifacts:
    needs: [windowsbuild, build] # List all jobs that produce artifacts
    runs-on: ubuntu-latest # or any other runner of your choice

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts/

      - name: Zip artifacts
        run: |
          cd artifacts
          find . -mindepth 2 -type f -exec mv '{}' . \;
          find . -type d -empty -delete
          mkdir streamer
          mv *.dll streamer
          mv *.so streamer
          mv *.template_debug streamer || true
          mv *.template_release streamer || true
          mv *.exp || true
          mv *.lib || true
          zip -r ../all_artifacts.zip .
        shell: bash

      - name: Upload zipped artifacts
        uses: actions/upload-artifact@v2
        with:
          name: all_artifacts
          path: all_artifacts.zip